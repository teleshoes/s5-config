#!/usr/bin/perl
use strict;
use warnings;

sub readWinfoNetworks();
sub setNetworkPriorities(@);
sub formatConfig();
sub formatNetwork($);
sub formatNetworkWpa($$$);
sub formatNetworkWep($$$);
sub formatNetworkNone($$);

my @configArr = (
  [ctrl_interface         => "/data/misc/wifi/sockets"],
  [disable_scan_offload   => "1"],
  [update_config          => "1"],
  [device_name            => "cm_klte"],
  [manufacturer           => "samsung"],
  [model_name             => "SM-G900T"],
  [model_number           => "SM-G900T"],
  [serial_number          => "fca3d35b"],
  [device_type            => "10-0050F204-5"],
  [config_methods         => "physical_display virtual_push_button"],
  [p2p_disabled           => "1"],
  [external_sim           => "1"],
);
my @configKeys = map {$$_[0]} @configArr;
my %config = map {$$_[0] => $$_[1]} @configArr;

sub main(@){
  my @networks = readWinfoNetworks();
  @networks = setNetworkPriorities @networks;

  my $wpaSupplicant = "";
  for my $key(@configKeys){
    $wpaSupplicant .= "$key=$config{$key}\n";
  }

  for my $network(@networks){
    $wpaSupplicant .= "\n" . formatNetwork $network;
  }
}

sub readWinfoNetworks(){
  my @networks;
  my @ssids = sort split /\n/, `winfo --list-all`;
  for my $ssidName(@ssids){
    my $info = `winfo "$ssidName"`;
    my $ssid = $1 if $info =~ /^ssid:(.*)$/m;
    my $enc = $1 if $info =~ /^enc:(.*)$/m;
    my $key = $1 if $info =~ /^key:(.*)$/m;
    my $mode = $1 if $info =~ /^mode:(.*)$/m;
    my $auto = $1 if $info =~ /^auto:(.*)$/m;
    if($enc =~ /^(WPA|WEP|NONE)/i and $mode =~ /managed/i){
      push @networks, {
        ssid => $ssid,
        enc  => $enc,
        key  => $key,
        auto => $auto,
      };
    }
  }

  return @networks;
}

sub setNetworkPriorities(@){
  my @networks = @_;

  my $count = @networks;

  @networks = sort {
    my $aAuto = $$a{auto} =~ /^\d+$/ ? $$a{auto} : $count;
    my $bAuto = $$b{auto} =~ /^\d+$/ ? $$b{auto} : $count;

    return $aAuto <=> $bAuto || $$a{ssid} cmp $$b{ssid};
  } @networks;

  #higher number is higher priority
  @networks = reverse @networks;

  my $i=1;
  for my $network(@networks){
    $$network{priority} = $i++;
  }

  return @networks;
}

sub formatConfig(){
  my $format = "";
  for my $key(@configKeys){
    $format .= "$key=$config{$key}\n";
  }
  return $format;
}

sub formatNetwork($){
  my $net = shift;
  if($$net{enc} =~ /^WPA$/){
    return formatNetworkWpa $$net{ssid}, $$net{key}, $$net{priority};
  }elsif($$net{enc} =~ /^WEP$/){
    return formatNetworkWep $$net{ssid}, $$net{key}, $$net{priority};
  }elsif($$net{enc} =~ /^NONE$/){
    return formatNetworkNone $$net{ssid}, $$net{priority};
  }
}

sub formatNetworkWpa($$$){
  my ($ssid, $psk, $priority) = @_;
  return "network={\n"
    . "\tssid=\"$ssid\"\n"
    . "\tpsk=\"$psk\"\n"
    . "\tkey_mgmt=WPA-PSK\n"
    . "\tpriority=$priority\n"
    . "}\n"
    ;
}
sub formatNetworkWep($$$){
  my ($ssid, $wepKey, $priority) = @_;
  return "network={\n"
    . "\tssid=\"$ssid\"\n"
    . "\tkey_mgmt=NONE\n"
    . "\tauth_alg=OPEN SHARED\n"
    . "\twep_key0=$wepKey\n"
    . "\tpriority=$priority\n"
    . "}\n"
    ;
}
sub formatNetworkNone($$){
  my ($ssid, $priority) = @_;
  return "network={\n"
    . "\tssid=\"$ssid\"\n"
    . "\tkey_mgmt=NONE\n"
    . "\tpriority=$priority\n"
    . "}\n"
    ;
}

&main(@ARGV);
